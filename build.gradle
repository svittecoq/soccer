buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'application'
}

apply plugin: 'application'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
}

apply from: 'bomVersions.gradle'

ext {
    jetty = [
        // https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-server
        "org.eclipse.jetty:jetty-server:${jettyVersion}",
        // https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-servlet
        "org.eclipse.jetty:jetty-servlet:${jettyVersion}",
        // https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-servlets
        "org.eclipse.jetty:jetty-servlets:${jettyVersion}",
        // https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-http
        "org.eclipse.jetty:jetty-http:${jettyVersion}",
        // https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-rewrite
        "org.eclipse.jetty:jetty-rewrite:${jettyVersion}"
        ]
    
    jersey = [
        // https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-server
        "org.glassfish.jersey.core:jersey-server:${jerseyVersion}",
        // https://mvnrepository.com/artifact/org.glassfish.jersey.containers/jersey-container-servlet
        "org.glassfish.jersey.containers:jersey-container-servlet:${jerseyVersion}",
        // https://mvnrepository.com/artifact/org.glassfish.jersey.inject/jersey-hk2
        "org.glassfish.jersey.inject:jersey-hk2:${jerseyVersion}",
        // https://mvnrepository.com/artifact/org.glassfish.jersey.media/jersey-media-json-jackson
        "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}",
        // https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-client
        "org.glassfish.jersey.core:jersey-client:${jerseyVersion}"
        ]
    
    jackson = [
        // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
        "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
        // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
        "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
        // https://mvnrepository.com/artifact/com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider
        "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jacksonVersion}"
        ]
        
    javaxWsRs = [
        // https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api
        "javax.ws.rs:javax.ws.rs-api:${javaxWsRsVersion}"
        ]   
        
    javaxSevlet = [    
        // https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
        "javax.servlet:javax.servlet-api:${javaxServletVersion}"
        ]
        
    jaxb = [
        // https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime
        "org.glassfish.jaxb:jaxb-runtime:${jaxbVersion}"
        ]

    postgresqlJava = [
        // https://mvnrepository.com/artifact/org.postgresql/postgresql
        "org.postgresql:postgresql:${postgresqlJavaVersion}"
        ]   
        
    slf4j = [
        // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
        "org.slf4j:slf4j-api:${slf4jVersion}",
        // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
        "org.slf4j:slf4j-simple:${slf4jVersion}"
        ]

    junitTest = [    
        // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter
        "org.junit.jupiter:junit-jupiter:${junitVersion}"
        ]
        
    jerseyTest = [    
        // https://mvnrepository.com/artifact/org.glassfish.jersey.test-framework/jersey-test-framework-core
        "org.glassfish.jersey.test-framework:jersey-test-framework-core:${jerseyTestVersion}",
        // https://mvnrepository.com/artifact/org.glassfish.jersey.test-framework.providers/jersey-test-framework-provider-jetty
        "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jetty:${jerseyTestVersion}"
        ]
}

dependencies {
    implementation jetty, jersey, jackson, javaxWsRs, javaxSevlet, jaxb, postgresqlJava, slf4j, junitTest, jerseyTest
}

clean.dependsOn(cleanEclipse)

tasks.eclipse.dependsOn(cleanEclipse)

task copyToLib(type: Copy) {

    into "$buildDir/libs"
    from configurations.runtimeClasspath
}

task stage(dependsOn: ['build', 'clean', 'copyToLib'])
build.mustRunAfter clean

mainClassName = 'soccer.SoccerMain'

jar {
  manifest {
    attributes(
      'Main-Class': mainClassName
    )
  }
}